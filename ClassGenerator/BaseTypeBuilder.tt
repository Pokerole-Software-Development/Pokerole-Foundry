/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
<#@ template debug="true" hostspecific="false" language="C#"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.Runtime"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ assembly name="System.Xml.ReaderWriter"
#><#@ assembly name="System.Private.Xml"
#><#@ assembly name="System.Collections"
#><#@ assembly name="$(SolutionDir)/ClassGenerator/bin/Debug/netcoreapp3.1/ClassGenerator.dll"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="System.Xml"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Xml.Schema"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="Pokerole"
#><#@ output extension=".cs" #><#
	//Note: this file's license header gets copied to the output
	//Generator.logError = (error) => this.Host.LogErrors(new CompilerErrorCollection(){error});
	Generator.sourceKind = SourceKind.CSharp;
	var (primarySchema, classes) = Generator.CompileSchema();
	//var primarySchema = data.primarySchema;
	//Dictionary<String, Generator.ClassDef> classes = data.classes;
 #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.ObjectModel;
using System.Xml.Serialization;
using System.Xml;
using System.Diagnostics;
using System.ComponentModel;
using System.Drawing;
using Newtonsoft.Json;
using Pokerole.Core.TypeGeneration;

namespace Pokerole.Core{
<#
	//make the classes!!!
	foreach	(Generator.ClassDef classDef in classes.Values)
	{
		StringBuilder constructorArgBuilder = new StringBuilder(classDef.fields.Count * 20);
		String mutableAccessor = classDef.isMutable ? "set; " : "";
		if (classDef.isDataItem)
		{
			if (classDef.isMutable){
#>	[System.CodeDom.Compiler.GeneratedCode("BaseTypeBuilder.tt", "??")]
	public partial class <#=classDef.name#> : MutableBaseDataItem<<#=classDef.name#>>
	{
<#
			}
			else{
#>	[System.CodeDom.Compiler.GeneratedCode("BaseTypeBuilder.tt", "??")]
	public partial record <#=classDef.name#> : BaseDataItem<<#=classDef.name#>>
	{
<#
			}
		}
		else if (!classDef.isReferenceType){
#>	[System.CodeDom.Compiler.GeneratedCode("BaseTypeBuilder.tt", "??")]
	public struct <#=classDef.name#>
	{
<#
		}
		else{
#>	[System.CodeDom.Compiler.GeneratedCode("BaseTypeBuilder.tt", "??")]
	public record <#=classDef.name#>
	{
<#
		}
		Write("\t\tpublic {0}(", classDef.name);
		bool firstParam = true;
		if (classDef.isDataItem){
			firstParam = false;
			Write("DataId dataId");
		}
		foreach	(Generator.FieldDef field in classDef.fields){
			if (firstParam){
				firstParam = false;
			}
			else{
				Write(",\r\n\t\t\t");
			}
			Write("{0} {1}", field.type.GetTypeDeclaration(false, false), LowercaseInitial(field.name));
		}
		Write(")");
		if (classDef.isDataItem){
			Write(" : base(dataId)");
		}
#>

		{
<#
		foreach(Generator.FieldDef field in classDef.fields){
			Write("\t\t\t{0} = {1};\r\n", field.name, field.type.GetAssignment(LowercaseInitial(field.name), true));
		}
#>
		}
<#
		if (classDef.isDataItem)
		{
			var nameField = classDef.fields.FirstOrDefault(field=>field.name == "Name" || field.name == "Filename");
			String nameAppend = nameField != null ? $", {nameField.name}" : "";
#>

		public override ItemReference<<#=classDef.name#>> ItemReference => new ItemReference<<#=classDef.name#>>(DataId<#=nameAppend#>);

<#}
		foreach(Generator.FieldDef field in classDef.fields){
#>
		/// <summary>
		/// <#= !String.IsNullOrEmpty(field.documentation) ? field.documentation : "Someone didn't document this item..." #>
		/// </summary>
		public <#= field.type.GetTypeDeclaration(true, false) #> <#=field.name#> { get; <#=mutableAccessor#>}
<#		}
		if (classDef.isDataItem){
#>
		public override DataKind Kind => DataKind.<#=classDef.name#>;
		public override (String, Object?)[] Values => new (String, Object?)[] {
<#
			foreach(Generator.FieldDef field in classDef.fields){
				WriteLine("\t\t\t(nameof({0}), {0}),", field.name);
			}
#>		};
<#		}
		//if (!classDef.isDataItem)
		//{
			////finish off the class since the other terminator won't get hit due to continue
			//Write("\t}\r\n");
			//continue;
		//}
		String lowercaseClassName = LowercaseInitial(classDef.name);
#>
		[XmlType(nameof(<#=classDef.name#>), Namespace = "<#=primarySchema.TargetNamespace#>")]
<#		if (classDef.isDataItem){
#>		[DebuggerDisplay("{ItemReference}")]
<#		}
#>		public partial class Builder : <#= String.Format(classDef.isDataItem ? "DataItemBuilder<{0}>" : "ItemBuilder<{0}>",
 classDef.name)#>
		{
			public Builder()
			{<#
		bool first = true;
		foreach (Generator.FieldDef field in classDef.fields)
		{
			if (field.type.ListType == null)
			{
				continue;
			}
			if (first)
			{
				Write("\r\n");
				first = false;
			}
#>				<#=field.name#> = <#=field.type.GetAssignment("10", false)#>;
<#
		}
#>			}
			public Builder(<#=classDef.name#> <#=lowercaseClassName#>)
			{
<#
		if (classDef.isDataItem)
		{
#>
				DataId = <#=lowercaseClassName#>.DataId;
<#
		}
#>
<#
		foreach (Generator.FieldDef field in classDef.fields){
			String assignment = field.type.GetAssignment(String.Format("{0}.{1}", lowercaseClassName, field.name), false);
			Write("\t\t\t\t{0} = {1};\r\n", field.name, assignment);
		}
#>
			}
<#
		if (classDef.isDataItem)
		{
			var nameField = classDef.fields.FirstOrDefault(field=>field.name == "Name" || field.name == "Filename");
			String nameAppend = nameField != null ? $", {nameField.name}" : "";
#>

			public override ItemReference<<#=classDef.name#>>? ItemReference => !DataId.HasValue ? null :
					new ItemReference<<#=classDef.name#>>(DataId.Value<#=nameAppend#>);

<#}

		foreach	(Generator.FieldDef field in classDef.fields)
		{
			//does this need special handling or can we just do this the easy way?
			bool needsBuilderEntry = field.type.NeedsXmlBuilder();

#>
			/// <summary>
			/// <#= !String.IsNullOrEmpty(field.documentation) ? field.documentation : "Someone didn't document this item..." #>
			/// </summary>
			[<#
			if (needsBuilderEntry || (!field.type.IsReferenceType && !field.type.isNullable))
			{
				Write("XmlIgnore");
			}
			else if (field.isAttribute)
			{
				Write(String.IsNullOrEmpty(field.proxyType) ? "XmlAttribute()" : "XmlAttribute(Type = typeof({0}))",
					field.proxyType);
			}
			else
			{
				Write(String.IsNullOrEmpty(field.proxyType) ? "XmlElement(IsNullable = {0})" :
					"XmlElement(IsNullable = {0}, Type = typeof({1}))",
					field.type.isNullable ? "true" : "false", field.proxyType);
			}
#>]
			public <#= field.type.GetTypeDeclaration(false, true) #> <#=field.name#> { get; set; }
<#			if (!needsBuilderEntry && !field.type.IsReferenceType && !field.type.isNullable)
			{
				//xmlseriralizer will throw a fit if we ask it to make a nullable not nullable, so we need to do magic
				#>
			[Browsable(false)]
			[DebuggerHidden]
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			[<#=field.isAttribute ? "XmlAttribute" : "XmlElement"#>("<#=field.name#>"<#=field.isAttribute ? "" :
 ", IsNullable = false"#><#=String.IsNullOrEmpty(field.proxyType) ? "" : String.Format(", Type = typeof({0})", field.proxyType)#>)]
			public <#=field.type.GetTypeDeclaration(false, false)#> <#=field.name#>NullableXmlAccessor
			{
				get => <#=field.name#> ?? default;
				set => <#=field.name#> = value;
			}
<#

				
				continue;
			}
			if (!needsBuilderEntry)
			{
				continue;
			}
#>			
			[Browsable(false)]
			[DebuggerHidden]
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
<#
			//if (field.type



			if (field.type.ListType == null)
			{
				//not a list
#>			[<#=field.isAttribute ? "XmlAttribute" : "XmlElement"#>("<#=field.name#>"<#=field.isAttribute ? "" : ", IsNullable = false"#>)]
			public <#=field.type.GetBuilderTypeDeclaration()#>? <#=field.name#>XmlAccessor
			{
				get => <#=field.name#> is null ? null : new <#=field.type.GetBuilderTypeDeclaration()#>(<#=field.NonNullReference()#>);
				set => <#=field.name#> = value?.Build();
			}

<#
				continue;
				
			}
			Generator.ClassDef otherDef = field.type.ClassType;
			if (otherDef != null)
			{
				//non-list custom type
				Write("bar\r\n");


				continue;
			}
			String rawListType = field.type.ListType.GetTypeDeclaration(false);
			String listType = field.type.GetListType();
			otherDef = field.type.ListType.ClassType;
#>
			[XmlArray("<#=field.name#>", IsNullable = <#=field.type.isNullable ? "true" : "false"#>)]
			[XmlArrayItem("<#=rawListType#>")]
			public <#=listType#>.Builder[] <#=field.name#>Builder
			{
				get
				{
					if (<#=field.name#> == null)
					{
						return Array.Empty<<#=listType#>.Builder>();
					}
					return <#=field.name#>.Select(item=>new <#=listType#>.Builder(item)).ToArray();
				}
				set
				{
					<#=field.name#>?.Clear();
					if (value == null)
					{
						return;
					}
					if (<#=field.name#> == null)
					{
						<#=field.name#> = new List<<#=listType#>>(value.Length);
					}
					ItemBuilder<<#=listType#>>.BuildList(value, <#=field.name#>);
				}
			}
<#		
		}#>
			public override (String, Object?)[] Values => new (String, Object?)[] {
<#
		foreach(Generator.FieldDef field in classDef.fields){
			WriteLine("\t\t\t\t(nameof({0}), {0}),", field.name);
		}
#>			};
			/// <summary>
			/// Whether or not all of the required Properites of this instance are set to build a new
			/// <see cref="<#=classDef.name#>"/>. <see cref="Build"/> will throw an exception if this returns false.
			/// </summary>
			public override bool IsValid
			{
				get
				{
<#		if (classDef.isDataItem)
		{#>
					if (DataId is null)
					{
						return false;
					}
<#		}#>
<#
		foreach(Generator.FieldDef field in classDef.fields)
		{
			if (field.type.isNullable)
			{
				//no check needed
				continue;
			}#>
					if (<#=field.name#> is null)
					{
						return false;
					}
<#
		}
#>
					return true;
				}
			}
<#
		//count needed entries
		int required = 0;
		foreach(Generator.FieldDef field in classDef.fields)
		{
			if (!field.type.isNullable)
			{
				required++;
			}
		}
#>			/// <summary>
			/// Which properties of this instance are not set, but should be set. Generally for debugging.
			/// </summary>
			public override List<String> MissingValues
			{
				get
				{
					List<String> missing = new List<String>(<#=required#>);
<#
		foreach(Generator.FieldDef field in classDef.fields)
		{
			if (!field.type.isNullable)
			{
#>
					if (<#=field.name#> is null)
					{
						missing.Add("<#=field.name#>");
					}
<#
			}
		}
#>
					return missing;
				}
			}
			/// <summary>
			/// Build and instance of <see cref="<#=classDef.name#>"/> from this Builder
			/// </summary>
			/// <returns>A new instance of <see cref="<#=classDef.name#>"/></returns>
			/// <exception cref="InvalidOperationException">If this method is called when not all required properties
			/// have been set</exception>
			public override <#=classDef.name#> Build(){
				if (!IsValid)
				{
					throw new InvalidOperationException("Not all required fields were set");
				}
				return new <#=classDef.name#>(<#
		firstParam = true;
		if (classDef.isDataItem)
		{
			firstParam = false;
			Write("DataId!.Value");
		}
		foreach (Generator.FieldDef field in classDef.fields)
		{
			if (firstParam)
			{
				firstParam = false;
			}
			else
			{
				Write(",");
			}
			Write("\r\n\t\t\t\t\t");
			if (field.type.isNullable)
			{
				Write(field.name);
				continue;
			}
			if (!field.type.IsReferenceType)
			{
				Write("{0}!.Value", field.name);
				continue;
			}
			Write("{0}!", field.name);
		}
  #>);
			}
		}
	}
<#}#>
	public enum DataKind
	{
		//Hardcoded entries since they are not in the schema
		TypeDefinition,
		Effect,
		Rank, //plan on converting that from an enum at some point in time
		//end of hardcoded values
<#
	foreach	(Generator.ClassDef classDef in classes.Values){
		if (classDef.isDataItem){
			WriteLine("\t\t{0},", classDef.name);
		}
	}
#>
	}
}<#+
	String LowercaseInitial(String s){ return Generator.LowercaseInitial(s);}
#>