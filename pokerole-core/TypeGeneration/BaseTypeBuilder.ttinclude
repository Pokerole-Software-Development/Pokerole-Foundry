<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.CodeDom.Compiler" #><#+
// * This Source Code Form is subject to the terms of the Mozilla Public
// * License, v. 2.0. If a copy of the MPL was not distributed with this
// * file, You can obtain one at https://mozilla.org/MPL/2.0/.

	static bool IsReferenceType(XmlSchemaSet schemaSet, XmlQualifiedName name)
	{
		switch (name.Name){
			case "string":
			case "byte[]":
			case"base64Binary":
				return true;
		}
		XmlSchemaObject item = schemaSet.GlobalTypes[name];
		XmlSchemaComplexType type = item as XmlSchemaComplexType;
		if (type != null){
			switch (type.Name)
			{
				case "ItemReference":
				case "DataId":
				case "Height":
				case "Weight":
					return false;
			}
			//if (type.Name == "ItemReference" || type.Name == "DataId"){
				//return false;
			//}
			return true;
		}
		return false;
	}
	FieldType GrabTypeFromAttribute(XmlSchemaElement parent, XmlAttribute unhandled, String structuresPath,
		XmlSchemaSet schemaSet, Dictionary<String, ClassDef> classes)
	{
		String verified;
		try{verified = XmlConvert.VerifyName(unhandled.Value); }
		catch (XmlException)
		{
			this.Host.LogErrors(new CompilerErrorCollection(){
					new CompilerError(structuresPath, parent.LineNumber, parent.LinePosition,
					"Unknown type", String.Format("Given type is not fully qualified: '{0}'",
					unhandled.Value))
					});
			return null;
		}
		XmlQualifiedName name;
		String[] parts = verified.Split(':');
		if (parts.Length > 1)
		{
			name = new XmlQualifiedName(parts[1], parts[0]);
		}
		else
		{
			name = new XmlQualifiedName(verified);
		}
		ClassDef def;
		if (!classes.TryGetValue(name.Name, out def))
		{
			def = null;
		}
		return new FieldType(NormalizeType(name.Name), IsReferenceType(schemaSet, name), def);
	}
	String LowercaseInitial(String input){
		if (String.IsNullOrEmpty(input)){
			return input;
		}
		String result = char.ToLowerInvariant(input[0]) + input.Substring(1);
		if (result == "throw"){
			return "@throw";
		}
		return result;
	}
	static String NormalizeType(String input){
		switch (input){
			case "boolean":
				return "bool";
			case "base64Binary":
				return "byte[]";
			case "color":
				return "Color";
		}
		return input;
	}
	class ClassDef{
		public bool isDataItem;
		public bool isReferenceType;
		public String name;
		public XmlSchemaComplexType definition;
		public List<FieldDef> fields;
		public bool isMutable;
	}
	class FieldDef{
		public bool isAttribute;
		public String documentation;
		public string name;
		public bool referById = false;
		//public bool isDict;
		//public bool isList;
		public FieldType type;
		public String proxyType;
		//public String keyType, valueType;
		//public String listType;
		//public String genericType;
		//public bool nullable;
		//public bool isReferenceType;
		public String NonNullReference(){
			return type.IsReferenceType ? $"{name}!" : $"{name} ?? default";
		}
	}
	class FieldType
	{
		String plainType;
		public bool isNullable = false;
		public bool IsReferenceType { get; }
		public ClassDef ClassType { get; }
		private FieldType genericType;
		public FieldType ListType { get; }
		public FieldType(String plainType, bool isReferenceType)
		{
			this.plainType = plainType;
			IsReferenceType = isReferenceType;
		}
		public FieldType(String plainType, bool isReferenceType, ClassDef classDef)
		{
			this.plainType = plainType;
			IsReferenceType = isReferenceType;
			ClassType = classDef;
		}
		//FieldType(String plainType, FieldType genericType
		public static FieldType ResolveType(FieldType genericType, FieldType listType,
			XmlQualifiedName typeName, XmlSchemaSet schemaSet, Dictionary<String, ClassDef> classes)
		{
			return new FieldType(genericType, listType, typeName, schemaSet, classes);
		}
		FieldType(FieldType genericType, FieldType listType,
			XmlQualifiedName typeName, XmlSchemaSet schemaSet, Dictionary<String, ClassDef> classes){
			ClassDef tempDef;
			IsReferenceType = IsReferenceType(schemaSet, typeName) || listType != null;
			plainType = NormalizeType(typeName.Name);
			if(classes.TryGetValue(plainType, out tempDef))
			{
				ClassType = tempDef;
			}
			this.genericType = genericType;
			this.ListType = listType;
		}
		public bool NeedsXmlBuilder()
		{
			if (ClassType != null || plainType == "ItemReference")
			{
				return true;
			}
			if (ListType != null)
			{
				return ListType.NeedsXmlBuilder();
			}
			return false;
		}
		public static String GetBasicTypeDeclaration(String type, FieldType genericType, bool nullable)
		{
			String generic = genericType != null ? genericType.plainType : null;
			return GetBasicTypeDeclaration(type, generic, nullable);
		}
		public static String GetBasicTypeDeclaration(FieldType type, FieldType genericType, bool nullable)
		{
			return GetBasicTypeDeclaration(type.plainType, genericType, nullable);
		}
		public static String GetBasicTypeDeclaration(String type, String genericType, bool nullable)
		{
			if (!String.IsNullOrEmpty(genericType))
			{
				String val = String.Format("{0}<{1}>", type, genericType);
				return nullable ? val + "?" : val;
			}
			return nullable ? type + "?" : type;
		}
		public String GetTypeDeclaration(bool readOnly)
		{
			if (ListType == null)
			{
				//something "simple"
				return GetBasicTypeDeclaration(plainType, genericType, isNullable);
			}
			//is a list
			String itemType = GetBasicTypeDeclaration(ListType, genericType, false);
			return String.Format(readOnly ? "IReadOnlyList<{0}>" : "List<{0}>", itemType);
		}
		public String GetBuilderTypeDeclaration()
		{
			if (ListType == null)
			{
				return $"{GetBasicTypeDeclaration(plainType, genericType, false)}.Builder";
			}
			return String.Format("{0}.Builder[]", GetBasicTypeDeclaration(ListType, genericType, false));
		}
		public String GetListType()
		{
			if (ListType == null)
			{
				throw new InvalidOperationException("Type is not a list");
			}
			return GetBasicTypeDeclaration(ListType, genericType, false);
		}
		public String GetTypeDeclaration(bool readOnly, bool forceNullable)
		{
			if (isNullable || !forceNullable || ListType != null)
			{
				return GetTypeDeclaration(readOnly);
			}
			return $"{GetTypeDeclaration(readOnly)}?";
		}
		public String GetAssignment(String incomingValue, bool readOnly)
		{
			if (ListType == null)
			{
				return incomingValue;
			}
			String itemType = GetBasicTypeDeclaration(ListType, genericType, false);
			if (!readOnly)
			{
				return $"new List<{itemType}>({incomingValue})";
			}
			return $"new List<{itemType}>({incomingValue}).AsReadOnly()";			
			//if (!readOnly)
			//{
				//return $"new Dictionary<{keyType}, {valueType}>({incomingValue})";
			//}
			//return $"new ReadOnlyDictionary<{keyType}, {valueType}>(new Dictionary<{keyType}, {valueType}>({incomingValue}))";
		}
	}

 #>