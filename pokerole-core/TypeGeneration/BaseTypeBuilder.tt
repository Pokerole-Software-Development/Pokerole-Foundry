<#@ template debug="true" hostspecific="true" language="C#" #>
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Schema" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ output extension=".cs" #>
<# 
	XmlSchemaSet schemaSet = new XmlSchemaSet();
	String structuresPath = this.Host.ResolvePath("Structures.xsd");
	XmlSchema primarySchema = XmlSchema.Read(new FileStream(structuresPath, FileMode.Open), null);
	schemaSet.Add(primarySchema);
	String[] additionalSchemaFiles = {
		"ExternalTypes.xsd",
		"MissingTypes.xsd"
	};
	foreach (var filename in additionalSchemaFiles){
		schemaSet.Add(XmlSchema.Read(new FileStream(this.Host.ResolvePath(filename), FileMode.Open), null));
	}
	schemaSet.Compile();
	if (!schemaSet.IsCompiled || !primarySchema.IsCompiled){
		throw new InvalidOperationException("Schema failed to compile");
	}
	var schemaItems = primarySchema.Items;

	Dictionary<String, ClassDef> classes = new Dictionary<String, ClassDef>();
	foreach	(XmlSchemaObject item in schemaItems){
		XmlSchemaComplexType typeDef = item as XmlSchemaComplexType;
		if (typeDef == null){
			String message = "Handling of type not implemnted: " + item;
			this.Host.LogErrors(new CompilerErrorCollection(){
				new CompilerError(structuresPath, item.LineNumber, item.LinePosition, "Unknown type", message)
			});
			continue;
		}
		XmlSchemaType baseType = typeDef.BaseXmlSchemaType;
		bool isDataItem = baseType.Name == "BaseDataItem";
		ClassDef def = new ClassDef();
		def.definition = typeDef;
		def.isDataItem = isDataItem;
		def.name = typeDef.Name;
		classes[def.name] = def;
	}
	//parse things further since we now know all classes in the template file
	foreach (var def in classes.Values){
		XmlSchemaComplexType typeDef = def.definition;
		XmlSchemaSequence sequence = (XmlSchemaSequence)def.definition.ContentTypeParticle;
		def.fields = new List<FieldDef>(sequence.Items.Count + typeDef.Attributes.Count);
		foreach (XmlSchemaAttribute attr in typeDef.Attributes)
		{
			FieldDef field = new FieldDef();
			field.name = attr.Name;
			field.isAttribute = true;
			field.type = NormalizeType(attr.SchemaTypeName.Name);
			if (attr.Annotation != null)
			{
				XmlSchemaDocumentation documentation = attr.Annotation.Items.OfType<XmlSchemaDocumentation>().FirstOrDefault();
				if (documentation != null){
					XmlNode node = documentation.Markup.FirstOrDefault();
					if (node != null){
						field.documentation = node.InnerText;
					}
				}
			}
			def.fields.Add(field);
		}
		
		foreach	(XmlSchemaElement item in sequence.Items){
			if (item.Name == "DataId"){
				//skip that one. It will be present in the base class
				continue;
			}
			FieldDef field = new FieldDef();
			field.name = item.Name;
			if (item.Annotation != null)
			{
				XmlSchemaDocumentation documentation = item.Annotation.Items.OfType<XmlSchemaDocumentation>().FirstOrDefault();
				if (documentation != null){
					XmlNode node = documentation.Markup.FirstOrDefault();
					if (node != null){
						field.documentation = node.InnerText;
					}
				}
			}

			if (item.UnhandledAttributes != null)
			{
				foreach (XmlAttribute unhandled in item.UnhandledAttributes)
				{
					switch (unhandled.LocalName){
						case "isDbLazy":
							field.isDbLazy = XmlConvert.ToBoolean(unhandled.Value);
							break;
						case "isDict":
							field.isDict = XmlConvert.ToBoolean(unhandled.Value);
							break;
						case "keyType":
							field.keyType = unhandled.Value;
							break;
						case "valueType":
							field.valueType = unhandled.Value;
							break;
						case "listItemType":
							String verified;
							try{verified = XmlConvert.VerifyName(unhandled.Value); }
							catch (XmlException e)
							{
								this.Host.LogErrors(new CompilerErrorCollection(){
										new CompilerError(structuresPath, item.LineNumber, item.LinePosition,
										"Unknown type", String.Format("Given type is not fully qualified: '{0}'",
										unhandled.Value))
										});
								continue;
							}
							int colonIndex = verified.IndexOf(':');
							if (colonIndex > -1){
								verified = verified.Substring(colonIndex + 1);
							}
							field.listType = verified;
							field.isList = true;
							break;
						default:
							this.Host.LogErrors(new CompilerErrorCollection(){
								new CompilerError(structuresPath, item.LineNumber, item.LinePosition,
								"Unknown attribute", String.Format("Attribute '{0}' is unknown", unhandled.LocalName))
								});
							break;
					}
				}
			}
			if (item.SchemaType != null)
			{
				//that is a list
				field.isList = true;
			}
			field.type = NormalizeType(item.SchemaTypeName.Name);
			field.nullable = item.IsNillable;
			def.fields.Add(field);
		}
	}
 #>
using System.Collections.Generic;
using System.Linq;

namespace Pokerole.Core{
<#
	//make the classes!!!
	foreach	(ClassDef classDef in classes.Values)
	{
		StringBuilder constructorArgBuilder = new StringBuilder(classDef.fields.Count * 20);
		if (classDef.isDataItem)
		{
#>	[System.CodeDom.Compiler.GeneratedCode("BaseTypeBuilder.tt", "??")]
	public partial record <#=classDef.name#> : BaseDataItem
	{
<#
		}
		else{
#>	[System.CodeDom.Compiler.GeneratedCode("BaseTypeBuilder.tt", "??")]
	public record <#=classDef.name#>
	{
<#
		}
		Write("\t\tpublic {0}(", classDef.name);
		bool firstParam = true;
		if (classDef.isDataItem){
			firstParam = false;
			Write("DataId dataId");
		}
		foreach	(FieldDef field in classDef.fields){
			if (firstParam){
				firstParam = false;
			}
			else{
				Write(", ");
			}
			Write("{0} {1}", field.GetTypeDeclaration(false), LowercaseInitial(field.name));
		}
		Write(")");
		if (classDef.isDataItem){
			Write(" : base(dataId)");
		}
#>

		{
<#
		foreach(FieldDef field in classDef.fields){
			Write("\t\t\t{0} = {1};\r\n", field.name, LowercaseInitial(field.name));
		}
#>
		}
<#
		foreach(FieldDef field in classDef.fields){
#>
		/// <summary>
		/// <#= !String.IsNullOrEmpty(field.documentation) ? field.documentation : "Someone didn't document this item..." #>
		/// </summary>
		public <#= field.GetTypeDeclaration(true) #> <#=field.name#> { get; }
<#		}


#>
	}
<#}

#>
}
<#+
	String LowercaseInitial(String input){
		if (String.IsNullOrEmpty(input)){
			return input;
		}
		return char.ToLowerInvariant(input[0]) + input.Substring(1);
	}
	String NormalizeType(String input){
		if (input == "boolean"){
			return "bool";
		}
		return input;
	}
	class ClassDef{
		public bool isDataItem;
		public String name;
		public XmlSchemaComplexType definition;
		public List<FieldDef> fields;
	}
	class FieldDef{
		public bool isAttribute;
		public String documentation;
		public string name;
		public String type;
		public bool referById = false;
		public bool isDbLazy;
		public bool isDict;
		public bool isList;
		public String keyType, valueType;
		public String listType;
		public bool nullable;
		public String GetTypeDeclaration(bool readOnly){
			if (!isList && !isDict){
				return nullable ? type + "?" : type;
			}
			if (isList)
			{
				return String.Format(readOnly ? "IReadOnlyList<{0}>" : "List<{0}>", listType);
			}
			return "";
		}
	}

 #>